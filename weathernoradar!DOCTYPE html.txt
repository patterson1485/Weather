<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>2 J's & Sons Weather Widget</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Use the Inter font family */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background for widget look */
        }
        /* Style for the loading spinner */
        .loader {
            border: 4px solid #4a5568;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom scrollbar for hourly forecast */
        .hourly-container::-webkit-scrollbar {
            height: 8px;
        }
        .hourly-container::-webkit-scrollbar-track {
            background: #2d3748;
            border-radius: 10px;
        }
        .hourly-container::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 10px;
        }
        .hourly-container::-webkit-scrollbar-thumb:hover {
            background: #718096;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-sm mx-auto bg-gray-800 text-white rounded-3xl p-6 shadow-2xl">
        
        <!-- Header -->
        <header class="flex items-center space-x-3 mb-4">
            <img src="2 J's & Sons Logo.png" alt="2 J's & Sons Logo" class="h-12 w-12 rounded-full" onerror="this.onerror=null;this.src='https://placehold.co/48x48/669966/FFFFFF?text=2J&font=sans';">
            <div>
                <h1 class="text-xl font-bold text-green-400">2 J's & Sons</h1>
                <p class="text-sm text-gray-400">Weather Widget</p>
            </div>
        </header>

        <div id="loading" class="text-center py-10">
            <div class="loader mx-auto"></div>
            <p class="mt-4 text-sm text-gray-400">Loading live data...</p>
        </div>

        <main id="widget-content" class="hidden">
            <!-- Main Display -->
            <div class="text-center my-6">
                <div id="main-icon" class="w-24 h-24 mx-auto mb-2">
                    <!-- Main weather icon will be injected here -->
                </div>
                <p id="temperature" class="text-6xl font-bold tracking-tighter">--°</p>
                <p id="description" class="text-lg text-gray-300">--</p>
            </div>

            <!-- Details Grid -->
            <div class="grid grid-cols-2 gap-4 text-center">
                <div class="bg-gray-700/50 p-3 rounded-xl">
                    <p class="text-xs text-gray-400">High / Low</p>
                    <p id="high-low" class="font-semibold">--°/--°</p>
                </div>
                <div class="bg-gray-700/50 p-3 rounded-xl">
                    <p class="text-xs text-gray-400">Chance of Rain</p>
                    <p id="rain-chance" class="font-semibold">--%</p>
                </div>
                <div class="bg-gray-700/50 p-3 rounded-xl">
                    <p class="text-xs text-gray-400">Wind</p>
                    <p id="wind-info" class="font-semibold">--</p>
                </div>
                 <div class="bg-gray-700/50 p-3 rounded-xl">
                    <p class="text-xs text-gray-400">Soil Temp</p>
                    <p id="soil-temp" class="font-semibold">--°F</p>
                </div>
            </div>

            <!-- Hourly Forecast Section -->
            <section id="hourly-forecast-section" class="mt-6 hidden">
                    <div id="hourly-forecast-container" class="hourly-container flex space-x-3 overflow-x-auto pb-2">
                        <!-- Hourly cards will be injected here by JS -->
                    </div>
            </section>
            
        </main>
        
        <footer class="text-center mt-6">
            <p id="last-updated" class="text-xs text-gray-500"></p>
        </footer>
    </div>

    <script>
        const LATITUDE = 36.54;
        const LONGITUDE = -94.48;

        // --- DOM Elements ---
        const loadingDiv = document.getElementById('loading');
        const widgetContent = document.getElementById('widget-content');
        const mainIconEl = document.getElementById('main-icon');
        const tempEl = document.getElementById('temperature');
        const descriptionEl = document.getElementById('description');
        const highLowEl = document.getElementById('high-low');
        const rainChanceEl = document.getElementById('rain-chance');
        const windInfoEl = document.getElementById('wind-info');
        const soilTempEl = document.getElementById('soil-temp');
        const lastUpdatedEl = document.getElementById('last-updated');
        const hourlyForecastSection = document.getElementById('hourly-forecast-section');
        const hourlyForecastContainer = document.getElementById('hourly-forecast-container');
        
        async function fetchAllData() {
            const isInitialLoad = loadingDiv.style.display !== 'none';
            console.log(`Fetching new data at ${new Date().toLocaleTimeString()}...`);

            try {
                // --- Primary NOAA API Call ---
                const pointsUrl = `https://api.weather.gov/points/${LATITUDE},${LONGITUDE}`;
                const pointsResponse = await fetch(pointsUrl);
                if (!pointsResponse.ok) throw new Error('NOAA API is currently unavailable.');
                
                const pointsData = await pointsResponse.json();
                const { forecast: forecastUrl, forecastHourly: hourlyUrl } = pointsData.properties;

                const [forecastResponse, hourlyResponse] = await Promise.all([
                    fetch(forecastUrl),
                    fetch(hourlyUrl)
                ]);

                if (!forecastResponse.ok || !hourlyResponse.ok) throw new Error('Could not retrieve forecast data.');

                const forecastData = await forecastResponse.json();
                const hourlyData = await hourlyResponse.json();

                // Update UI with the new data
                updateUI(forecastData.properties.periods);
                updateHourlyForecast(hourlyData.properties.periods);
                
                // --- Secondary API Call for Soil Temperature ---
                fetch(`https://api.open-meteo.com/v1/forecast?latitude=${LATITUDE}&longitude=${LONGITUDE}&current=soil_temperature_6cm&temperature_unit=fahrenheit`)
                    .then(res => res.json())
                    .then(data => updateSoilTempUI(data))
                    .catch(err => {
                        console.error("Soil Temp API failed:", err);
                        updateSoilTempUI({}); // Show N/A on failure
                    });
                
                if (isInitialLoad) {
                    loadingDiv.style.display = 'none';
                    widgetContent.classList.remove('hidden');
                }
                lastUpdatedEl.textContent = `Last updated: ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;

            } catch (error) {
                console.error("Failed to fetch data:", error);
                if (isInitialLoad) displayError(error.message);
            }
        }
        
        function updateUI(periods) {
            if (!periods || periods.length === 0) return;
            
            const currentPeriod = periods[0];
            
            // Main Display
            tempEl.textContent = `${Math.round(currentPeriod.temperature)}°`;
            descriptionEl.textContent = currentPeriod.shortForecast;
            mainIconEl.innerHTML = getWeatherIcon(currentPeriod.shortForecast);

            // Details Grid
            rainChanceEl.textContent = `${currentPeriod.probabilityOfPrecipitation.value || 0}%`;
            windInfoEl.textContent = `${currentPeriod.windSpeed} ${currentPeriod.windDirection}`;
            
            // Calculate today's high and low from the forecast periods
            const today = new Date().toISOString().slice(0, 10);
            let todayHigh = -Infinity;
            let todayLow = Infinity;

            periods.filter(p => p.startTime.startsWith(today)).forEach(p => {
                todayHigh = Math.max(todayHigh, p.temperature);
                todayLow = Math.min(todayLow, p.temperature);
            });
            
            // If the first period is nighttime, today's high might be in the second period.
            if(!currentPeriod.isDaytime && periods[1]) {
                todayHigh = Math.max(todayHigh, periods[1].temperature);
            }

            highLowEl.textContent = `${Math.round(todayHigh)}° / ${Math.round(todayLow)}°`;

        }
        
        function updateSoilTempUI(data) {
            if (data && data.current && data.current.soil_temperature_6cm !== null) {
                   soilTempEl.textContent = `${Math.round(data.current.soil_temperature_6cm)}°F`;
            } else {
                   soilTempEl.textContent = 'N/A';
            }
        }
        
        function updateHourlyForecast(periods) {
            if (!periods || periods.length === 0) return;
            hourlyForecastContainer.innerHTML = '';
            const next12Hours = periods.slice(0, 12);
            next12Hours.forEach(period => {
                const hour = new Date(period.startTime).toLocaleTimeString([], { hour: 'numeric' }).replace(' ', '');
                const rainChance = (period.probabilityOfPrecipitation && period.probabilityOfPrecipitation.value !== null) ? period.probabilityOfPrecipitation.value : 0;
                const iconHtml = getWeatherIcon(period.shortForecast, false);
                const card = `<div class="flex-shrink-0 text-center p-3 rounded-xl bg-gray-700/50 w-20"><p class="text-xs font-semibold">${hour}</p><div class="w-8 h-8 mx-auto my-1">${iconHtml}</div><p class="text-xs text-blue-300">${rainChance}%</p></div>`;
                hourlyForecastContainer.innerHTML += card;
            });
            hourlyForecastSection.classList.remove('hidden');
        }

        function getWeatherIcon(forecast) {
            const forecastLower = (forecast || '').toLowerCase();
            const sizeClass = 'w-full h-full';
            
            const icons = {
                'clear': `<svg class="${sizeClass} text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>`,
                'sunny': `<svg class="${sizeClass} text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>`,
                'partly cloudy': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M41.6,20.9C41.6,15.1,36.9,10.4,31.1,10.4c-5.8,0-10.5,4.7-10.5,10.5c0,5.8,4.7,10.5,10.5,10.5 C36.9,31.4,41.6,26.7,41.6,20.9z" fill="#f5ce44"/><path d="M49.4,34.3c-2.2-1.9-5.1-3-8.2-3c-1.8,0-3.6,0.4-5.2,1.1c-2.6-3.8-7-6.2-11.8-6.2c-7.9,0-14.3,6.4-14.3,14.3 c0,7.9,6.4,14.3,14.3,14.3h25.1c6.2,0,11.2-5,11.2-11.2C60.4,39.6,55.7,35.1,49.4,34.3z" fill="#a0aec0"/></svg>`,
                'cloudy': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M49.4,26.2c-2.2-1.9-5.1-3-8.2-3c-1.8,0-3.6,0.4-5.2,1.1C33.4,20.5,29,18,24.2,18C16.3,18,10,24.4,10,32.2 c0,7.9,6.4,14.3,14.3,14.3h25.1c6.2,0,11.2-5,11.2-11.2C60.4,31.5,55.7,27.1,49.4,26.2z" fill="#a0aec0"/></svg>`,
                'rain': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M49.4,26.2c-2.2-1.9-5.1-3-8.2-3c-1.8,0-3.6,0.4-5.2,1.1C33.4,20.5,29,18,24.2,18C16.3,18,10,24.4,10,32.2 c0,7.9,6.4,14.3,14.3,14.3h25.1c6.2,0,11.2-5,11.2-11.2C60.4,31.5,55.7,27.1,49.4,26.2z" fill="#a0aec0"/><path d="M32.9,48.2c1.9,1.9,5.1,1.9,7.1,0c1.9-1.9,1.9-5.1,0-7.1c-1-1-2.3-1.5-3.5-1.5s-2.5,0.5-3.5,1.5 C31,43.2,31,46.3,32.9,48.2z" fill="#4299e1"/><path d="M21.9,48.2c1.9,1.9,5.1,1.9,7.1,0c1.9-1.9,1.9-5.1,0-7.1c-1-1-2.3-1.5-3.5-1.5s-2.5,0.5-3.5,1.5 C20,43.2,20,46.3,21.9,48.2z" fill="#4299e1"/><path d="M43.9,59.2c1.9,1.9,5.1,1.9,7.1,0c1.9-1.9,1.9-5.1,0-7.1c-1-1-2.3-1.5-3.5-1.5s-2.5,0.5-3.5,1.5 C42,54.2,42,57.3,43.9,59.2z" fill="#4299e1"/></svg>`,
                'thunderstorm': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M49.4,26.2c-2.2-1.9-5.1-3-8.2-3c-1.8,0-3.6,0.4-5.2,1.1C33.4,20.5,29,18,24.2,18C16.3,18,10,24.4,10,32.2 c0,7.9,6.4,14.3,14.3,14.3h25.1c6.2,0,11.2-5,11.2-11.2C60.4,31.5,55.7,27.1,49.4,26.2z" fill="#718096"/><path d="M41.5,42.5h-8.8c-0.6,0-1-0.3-1.2-0.8c-0.2-0.5,0-1.1,0.4-1.4l11.2-8.8c0.4-0.3,1-0.3,1.4,0.1c0.4,0.4,0.5,1,0.1,1.4 l-2.2,3.3h5.9c0.6,0,1,0.5,1,1S42,42.5,41.5,42.5z" fill="#f5ce44"/></svg>`,
                'snow': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M49.4,26.2c-2.2-1.9-5.1-3-8.2-3c-1.8,0-3.6,0.4-5.2,1.1C33.4,20.5,29,18,24.2,18C16.3,18,10,24.4,10,32.2 c0,7.9,6.4,14.3,14.3,14.3h25.1c6.2,0,11.2-5,11.2-11.2C60.4,31.5,55.7,27.1,49.4,26.2z" fill="#a0aec0"/><path d="M32.8,43.3c-1.1,0-2-0.9-2-2v-2.2c0-1.1,0.9-2,2-2s2,0.9,2,2v2.2C34.8,42.4,33.9,43.3,32.8,43.3z" fill="#fff"/><path d="M32.8,55.3c-1.1,0-2-0.9-2-2v-2.2c0-1.1,0.9-2,2-2s2,0.9,2,2v2.2C34.8,54.4,33.9,55.3,32.8,55.3z" fill="#fff"/><path d="M38.1,49.3c-0.8-0.8-0.8-2,0-2.8l1.6-1.6c0.8-0.8,2-0.8,2.8,0s0.8,2,0,2.8l-1.6,1.6C39.9,50.1,38.8,50.1,38.1,49.3z" fill="#fff"/><path d="M27.6,49.3c-0.8-0.8-0.8-2,0-2.8l1.6-1.6c0.8-0.8,2-0.8,2.8,0s0.8,2,0,2.8l-1.6,1.6C29.4,50.1,28.3,50.1,27.6,49.3z" fill="#fff"/><path d="M38.1,49.3c-0.8-0.8-0.8-2,0-2.8l1.6-1.6c0.8-0.8,2-0.8,2.8,0s0.8,2,0,2.8l-1.6,1.6C39.9,50.1,38.8,50.1,38.1,49.3z" fill="#fff"/><path d="M42.8,47.3v-2.2c0-1.1,0.9-2,2-2s2,0.9,2,2v2.2c0,1.1-0.9,2-2,2S42.8,48.4,42.8,47.3z" fill="#fff"/><path d="M22.8,47.3v-2.2c0-1.1,0.9-2,2-2s2,0.9,2,2v2.2c0,1.1-0.9,2-2,2S22.8,48.4,22.8,47.3z" fill="#fff"/></svg>`,
                'fog': `<svg class="${sizeClass}" viewBox="0 0 64 64"><path d="M51.6,40.1H12.4c-3.3,0-6-2.7-6-6s2.7-6,6-6h39.2c3.3,0,6,2.7,6,6S54.9,40.1,51.6,40.1z" fill="#a0aec0"/><path d="M44.4,52.1H8.8c-3.3,0-6-2.7-6-6s2.7-6,6-6h35.6c3.3,0,6,2.7,6,6S47.7,52.1,44.4,52.1z" fill="#a0aec0"/></svg>`,
            };

            const key = Object.keys(icons).find(key => forecastLower.includes(key));
            return key ? icons[key] : icons['cloudy'];
        }
        
        function displayError(message) {
            loadingDiv.innerHTML = `<p class="text-red-500 font-semibold">${message}</p>`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchAllData(); 
            setInterval(fetchAllData, 15 * 60 * 1000);
        });
    </script>

</body>
</html>
